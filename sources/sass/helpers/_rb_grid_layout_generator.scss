// RawBlock Gridlayout
//
// RawBlock provides a layout gridsystem that is flexible, responsive and uses a human readable syntax.
//
// Styleguide 2

// Basic principles
//
// The layout structure is defined with the use of layout classes and are are recognizable by the `.use-*` prefix .
// The layout classes are globally defined and can be used on all elements of the page.
//
// Styleguide 2.1

// The Grid
//
// The layout grid targets several screen sizes. Our gridsystem uses an other approach then many other frameworks.
// RawBlock is not based on a 12 columns or 16 columns grid, but uses **percentage** as his base units.
// Inside file `_rb_layout_config.scss` in directory `sources/sass/variables` you can find the variable `$breakpointConfig`
// where you can declare your breakpoints and define the specific property.
// The property is also `breakpoint-class`, which will be suffixed to the `use-size-%` modifier.
//
// The default and  **mandatory**  property is `all`. This property defines the layout styles for all screensizes.
// The other properties can be changed or complemented to your own requirement.
//
// Our default layout breakpoints are:
//
// `use-size-%`      - for all screens widths
// `use-size-%-s`    - for screens width up to 768px.
// `use-size-%-m`    - for screens widths between 769px and 1024px.
// `use-size-%-l`    - for screens widths above 1025px.
//
// Styleguide 2.2

// Columns
//
// RawBlock uses 22 width units that are starting with `.use-size-%` ranging from **5%** to **100%** with **5%** increments.
// Three expections are: .use-size-16 (16.6666%), .use-size-33 (33.3333%) and .use-size-66 (66.6666%)
//
// Styleguide 2.3

@mixin rb-generate-layout-columns() {

	.use-column-group {
		display: flex;
		flex-wrap: wrap;

		.use-column-group {
			flex: 1;
		}
	}

	.use-equal-heights {
		> [class*=use-size-]  {
			display: flex;
			flex-wrap: wrap;
		}
	}

	.use-unequal-height,
	[class*=use-size-].use-unequal-height {
		display: block;
	}

	.use-equal-height,
	[class*=use-size-].use-equal-height {
		display: flex;
		flex-wrap: wrap;
	}

}

@mixin rb-layout-offset($className) {

	@if $className == 'all' {
		$offsetType: '';

	} @else {
		$offsetType: '-' + $className;
	}

	.use-offset-right#{$offsetType} {
		margin-left: auto;
	}

	.use-offset-left#{$offsetType} {
		margin-right: auto;
	}

	.use-offset-center#{$offsetType} {
		margin: auto;
	}
}

//
//
//
@mixin rb-size-gutter-generator($className, $gutter) {

	@if type-of($gutter) == 'map' {

		@if map-has-key($gutter, horizontal) {
			$gutterHorizontal: map-get($gutter, horizontal);
		}
		@if map-has-key($gutter, vertical) {
			$gutterVertical: map-get($gutter, vertical);
		}

		.use-gutters {
			margin-left: (-$gutterHorizontal);

			> [class*=use-size-] {
				margin-bottom: $gutterVertical;
				padding-left: ($gutterHorizontal);
			}
		}

		.use-gutters-vertical {

			> [class*=use-size-]  {
				margin-bottom: $gutterVertical;
			}
		}

		.use-gutters-horizontal {
			margin-left: (-$gutterHorizontal);

			> [class*=use-size-]  {
				padding-left: ($gutterHorizontal);
			}
		}


	}
}


//  Size Generator
//
//
@mixin rb-size-generator($className) {
	$i: 5;
	$steps: 5;

	@if $className == 'all' {
		$colomnType: '';

	} @else {
		$colomnType: '-' + $className;
	}

	@while $i <= 100 {

		//If no width is desired
		@if $i == 100 {
			.use-size-auto#{$colomnType} {
				width: auto;
			}

			//Element will take available space
			.use-size-flex#{$colomnType} {
				flex: 1;
				width: auto;
			}

			//Element will take twice the available space
			.use-size-flex-double {
				flex: 2;
				width: auto;
			}
		}

		// create width: 33%
		@if $i > 30 and $i <= 35 {
			.use-size-33#{$colomnType} {
				width: 33.3333%;
			}
		}

		// create width: 66%
		@if $i > 65 and $i <= 70 {
			.use-size-66#{$colomnType} {
				width: 66.6666%;
			}
		}

		// create width: 16%
		@if $i > 15 and $i <= 20 {
			.use-size-16#{$colomnType} {
				width: 16.6666%;
			}
		}

		// create
		&.use-size-#{$i}#{$colomnType} {
			width: $i * 1%;
		}

		// increment the counter
		$i: $i + $steps;
	}

}

//
@mixin rb-generate-layout-styles($configs) {
	//Styles breakpoints
	@each $className, $config in $configs {
		$gutter: map-get($config, gutter);
		$flexOrderSize: map-get($config, flexOrderSize);

		@if $className == 'all' {
			@include rb-layout-styles($className, $gutter, $flexOrderSize);
			@include rb-generate-layout-columns();
		} @else {
			@media #{map-get($config, media)} {
				@include rb-layout-styles($className, $gutter, $flexOrderSize);
			}
		}
	}
}

@mixin rb-layout-styles($className, $gutter, $flexOrderSize) {
	@include rb-size-generator($className);
	@include rb-size-gutter-generator($className, $gutter);
	@include rb-layout-offset($className);
}

